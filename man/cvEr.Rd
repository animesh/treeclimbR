% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cvScore.R
\name{cvEr}
\alias{cvEr}
\title{calculte cross validation error}
\usage{
cvEr(tse, kFold = 1, node, onRow = TRUE, groupCol = "group",
  normLibSize = TRUE, n = 100, assayNum = 1)
}
\arguments{
\item{tse}{A TreeSummarizedExperiment object.}

\item{kFold}{A numeric value. K-fold cross validation.}

\item{node}{A numeric or character vector.}

\item{onRow}{A logical value, TRUE or FALSE.}

\item{groupCol}{The name of the column that stores the group information of
samples.}

\item{normLibSize}{A logical value, TRUE or FALSE.}

\item{n}{A numeric value. The number of pairs.}

\item{assayNum}{A numeric value.}
}
\value{
a numeric value
}
\description{
\code{cvEr} calculates the cross validation error.
}
\examples{
library(TreeSummarizedExperiment)
library(ape)
set.seed(1)
exTree <- rtree(1000)

p <- runif(1000)
p <- p/sum(p)
y <- matrix(rmultinom(50, size =5000, prob = p),nrow=1000)

colnames(y) <- paste("S", 1:50, sep = "")
rownames(y) <- exTree$tip.label


toy_lse <- TreeSummarizedExperiment(assays = list(y), 
                                    rowTree = exTree)


toy_lse <- parEstimate(obj = toy_lse)
dat1 <- simData(obj = toy_lse, ratio = 4, scenario = "S1",
                minTip.A = 20, maxTip.A = 40,
                minTip.B = 20)
# view simulation scenario
viewSim(dat1)
(br <- metadata(dat1)$branch)

# Aggregation
dat2 <- aggData(x = dat1, onRow = TRUE, FUN = sum)
# output score
score <- scoreBP(tse = dat2, onRow = TRUE, 
                 groupCol = "group", normLibSize = TRUE,
                 n = 100, assayNum = 1)
score <- round(score, digits = 4)
# search level
final <- searchLevel(tree = rowTree(dat2),
                     scoreData = data.frame(score),
                     scoreCol = "auc",
                     searchMax = TRUE,
                     parentPrior = TRUE, 
                     message = FALSE)
                     
# the nodes selected
nodeS <- final$nodeNum[final$keep]                  
                     
# cross validation error
cv <- lapply(seq_along(nodeS), FUN = function(x) {
                     cat(x, "out of ", length(nodeS), " has finished \\n")
                     cvEr(tse = dat2, kFold = 10, node = nodeS[x])} )
out <- data.frame(nodeNum = nodeS, err = unlist(cv))
out <- out[order(out$err, decreasing = FALSE), ]
}
\author{
Ruizhu HUANG
}

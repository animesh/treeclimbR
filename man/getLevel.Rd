% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getLevel.R
\name{getLevel}
\alias{getLevel}
\title{search for a target level on the tree via a specified score}
\usage{
getLevel(tree, score_data, drop, score_column, node_column, get_max,
  parent_first = TRUE, message = FALSE)
}
\arguments{
\item{tree}{a phylo object to provide the hierarchical structure of nodes.}

\item{score_data}{a data frame to provide scores for all nodes of the tree.
The data frame should have at least five columns, four of them naming
\code{nodeLab}, \code{nodeLab_alias}, \code{nodeNum} and \code{isLeaf}.
These four columns provide the information about nodes. The score column
could be named freely.}

\item{drop}{a logical expression indicating elements or rows to keep:
missing values are taken as false.}

\item{score_column}{the name of the score column. The search is based on the
score value.}

\item{node_column}{the name of the column that stores the node number.}

\item{get_max}{a logical value, TRUE or FALSE. If TRUE, search for nodes
that has higher score value than its descendants; otherwise, search for
nodes that has lower score value than its descendants.}

\item{parent_first}{a logical value, TRUE or FALSE. If TRUE, the parent
node is selected if tied values occur on the parent node and some of the
chidren nodes.}

\item{message}{a logical value, TRUE or FALSE. The default is FALSE. If TRUE,
the progress message is printed out.}
}
\value{
a value
}
\description{
\code{getLevel} searches for the target level of the tree via a specified
score. The score value needs to be provided for each node of the tree.
}
\examples{

library(TreeSummarizedExperiment)
library(ggtree)
data("tinyTree")
ggtree(tinyTree, size = 2) +
geom_text2(aes(label = node), color = "darkblue",
           hjust = -0.5, vjust = 0.7, size = 4) +
    geom_text2(aes(label = label), color = "darkorange",
               hjust = -0.1, vjust = -0.7, size = 4)
set.seed(1)
count <- matrix(rnbinom(300,size=1,mu=10),nrow=10)
colnames(count) <- paste(rep(LETTERS[1:3], each = 10),
                         rep(1:10,3), sep = "_")
rownames(count) <- tinyTree$tip.label
count[1, ] <- 0
rowInf <- DataFrame(var1 = sample(letters[1:3], 10, replace = TRUE),
                    var2 = sample(c(TRUE, FALSE), 10, replace = TRUE))
colInf <- DataFrame(gg = factor(sample(1:3, 30, replace = TRUE)),
                    group = rep(LETTERS[1:3], each = 10))
lse <- TreeSummarizedExperiment(assays = list(count),
                                rowData = rowInf,
                                colData = colInf,
                                rowTree = tinyTree)

tse <- aggData(x = lse, onRow = TRUE)

out <- runEdgeR(tse = tse, onRow = TRUE)

final <- getLevel(tree = rowTree(tse),
                     score_data = data.frame(out),
                     drop =  FDR > 0.05,
                     score_column = "PValue",
                     node_column = "nodeNum",
                     get_max = FALSE,
                     parent_first = TRUE, 
                     message = FALSE)
                     
# No node is kept because there is no difference between two groups
final$nodeNum[final$keep]

}
\author{
Ruizhu huang
}

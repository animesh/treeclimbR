% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/singleCell_dsSC.R
\name{dsSC}
\alias{dsSC}
\title{Test differential state using edgeR for single cell data}
\usage{
dsSC(d_sce, tree, feature_on_row = TRUE, design = NULL,
  contrast = NULL, normalize = TRUE, method = "TMM",
  adjust_method = "BH", prior_count = 0.125, min_sample = 4,
  min_cell = 4, group_column = "group_id", message = FALSE)
}
\arguments{
\item{d_sce}{A SingleCellExperiment object.}

\item{tree}{A phylo object.}

\item{feature_on_row}{A logical value, TRUE or FALSE. If TRUE (default), the columns
of the \code{assays} tables are treated as samples, and rows as entities
(e.g. genes); otherwise, the other way around.}

\item{design}{A numeric matrix. It must be of full column rank. Defaults to
use all columns of sample annotation data to create the design matrix. The
sample annotation data is stored in the \code{colData} of \code{d_sce} when
\code{feature_on_row = TRUE}; otherwise it is in the \code{rowData}. Note: Users
should check whether the default created design matrix is exactly what they
want or create their own design matrix using
\code{\link[stats]{model.matrix}}.}

\item{contrast}{A numeric vector specifying one contrast of
the linear model coefficients to be tested equal to zero. Its length
must equal to the number of columns of design. If NULL, the last
coefficient will be tested equal to zero.}

\item{normalize}{A logical value, TRUE or FALSE. The default is TRUE.}

\item{method}{Normalization method to be used. See
\code{\link[edgeR]{calcNormFactors}} for more details.}

\item{adjust_method}{A character string stating the method used to adjust
p-values for multiple testing, passed on to \code{\link[stats]{p.adjust}}.
It could be "bonferroni", "holm", "hochberg", "hommel", "BH", or "BY".}

\item{prior_count}{average prior count to be added to observation to shrink
the estimated log-fold-changes towards zero. See \code{prior.count} in
\code{\link[edgeR]{glmFit}}}

\item{min_sample}{A numeric value. The minimum number of samples with
non-zero value.}

\item{min_cell}{A numeric value. The minimun number of cells in a node-sample
required to consider the sample for differential testing}

\item{group_column}{The name of column that stores group information for
samples.}

\item{message}{A logic value. If TRUE, the running process is printed out.}
}
\value{
A data frame
\item{assays}{A list of tables}
\item{rowData}{It stores the information of rows in \code{assays}, and the
tables extracted from a \code{DGELRT} object that is generated by
\code{\link[edgeR:glmFit]{glmLRT}}. The later is stored as the internal part
of the \code{rowData}. More details or example could be found in the vignette
\code{Example of data analysis}}
\item{colData}{NULL}
\item{metadata}{
   \itemize{
   \item \code{assayNum} which elements in the \code{assays} have been
   used to run differential abundance analysis.
   \item \code{design} the design matrix as input.
   \item \code{contrast} the contrast vector as input.
   \item \code{output_glmFit} the output from \code{\link[edgeR]{glmFit}}. A
   object of \code{\link[edgeR]{DGEGLM-class}}
   }
}
}
\description{
\code{dsSC} run analysis for single cell data.
}
\examples{

library(TreeSummarizedExperiment)
set.seed(1)
count <- matrix(rnbinom(300,size=1,mu=10),nrow=10)
colnames(count) <- paste(rep(LETTERS[1:3], each = 10), rep(1:10,3), sep = "_")
rownames(count) <- tinyTree$tip.label
count[1, ] <- 0
rowInf <- DataFrame(var1 = sample(letters[1:3], 10, replace = TRUE),
                    var2 = sample(c(TRUE, FALSE), 10, replace = TRUE))
colInf <- DataFrame(gg = factor(sample(1:3, 30, replace = TRUE)),
                    group = rep(LETTERS[1:3], each = 10))
lse <- TreeSummarizedExperiment(assays = list(count),
                                rowData = rowInf,
                                colData = colInf,
                                rowTree = tinyTree)
nodes <- showNode(tree = tinyTree, only.leaf = FALSE)
d_sce <- aggValue(x = lse, rowLevel = nodes)

out <- runEdgeR(d_sce = d_sce, feature_on_row = TRUE)



}
